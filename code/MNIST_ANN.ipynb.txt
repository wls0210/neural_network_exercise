# ////////////////////////////////////////////////////////
# / MNIST 2 hidden layer ANN                             /
# / Date: 2019-07-13                                     /
# / ---------------------------------------------------- /
# / Input layer: 28*28 vector (MNIST image)              /
# / Hidden layer1: 256 feature (relu)                    /
# / Hidden layer2: 256 feature (relu)                    /
# / Output layer: 10 prediction (softmax, MNIST label)   /
# / Cost func: cross entropy                             /
# / Optimizer: Adam                                      /
# / Using "Dropout" to prevent overfitting               /
# ////////////////////////////////////////////////////////

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

# load MNIST data set as mnist
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("./mnist/data/", one_hot=True)

# data io placeholder
X = tf.placeholder(tf.float32, [None, 784])
Y = tf.placeholder(tf.float32, [None, 10])

# probability to keep neural (dropout parameter)
keep_prob = tf.placeholder(tf.float32)

# hidden layer1
W1 = tf.Variable(tf.random_normal([784, 256], stddev = 0.01))
L1 = tf.nn.relu(tf.matmul(X, W1))
L1 = tf.nn.dropout(L1, keep_prob)

# hidden layer 2
W2 = tf.Variable(tf.random_normal([256, 256], stddev = 0.01))
L2 = tf.nn.relu(tf.matmul(L1, W2))
L2 = tf.nn.dropout(L2, keep_prob)

# output layer
W3 = tf.Variable(tf.random_normal([256, 10], stddev = 0.01))
model = tf.matmul(L2, W3)

# cost function
cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=model, labels=Y))

# optimizer
optimizer = tf.train.AdamOptimizer(0.001).minimize(cost)

# initialize session
init = tf.global_variables_initializer()
sess = tf.Session()
sess.run(init)

# set batch size
batch_size = 100
total_batch = int(mnist.train.num_examples / batch_size)

# learning 25 epoch
for epoch in range(25):
    total_cost = 0
    
    # learning each batch
    for i in range(total_batch):
        batch_xs, batch_ys = mnist.train.next_batch(batch_size)
        
        _, cost_val = sess.run([optimizer, cost], feed_dict = {X:batch_xs, Y:batch_ys, keep_prob:0.8}) 
        
        total_cost += cost_val
        
    # inform learning process
    print('Epoch:', '%04d' % (epoch + 1), 'Avg.cost:', '{:.3f}'.format(total_cost / total_batch))
    
print('End')

# compare prediction with label
is_correct = tf.equal(tf.argmax(model, 1), tf.argmax(Y, 1))
# compute avg
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))
# print accuracy
print('accuracy:', sess.run(accuracy, feed_dict = {X: mnist.test.images, Y: mnist.test.labels, keep_prob:1}))

labels = sess.run(model, feed_dict = {X: mnist.test.images, Y: mnist.test.labels, keep_prob: 1})

fig = plt.figure()

# show test mnist image and prediction
for i in range(15):
    subplot = fig.add_subplot(3, 5, i + 1)
    subplot.set_xticks([])
    subplot.set_yticks([])
    subplot.set_title('%d' % np.argmax(labels[i]))
    subplot.imshow(mnist.test.images[i].reshape((28,28)), cmap = plt.cm.gray_r)
plt.show()
