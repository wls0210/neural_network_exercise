# ////////////////////////////////////////////////////////////
# / MNIST CNN                                                /
# / Date: 2019-07-18                                         /
# / Author: Park Seungjin                                    /
# / -------------------------------------------------------- /
# / Input layer: 28*28 vector (MNIST image)                  /
# / Hidden layer1: 3,3,1,32 convolution, 1,2,2,1 max pooling /
# / Hidden layer2: 3,3,32,64 convolution, 1,2,2,1 max pooling /
# / Hidden layer3: 256 feature                               /
# / Output layer: 10 prediction (softmax, MNIST label)       /
# / Cost func: cross entropy                                 /
# / Optimizer: Adam                                          /
# / Using "Dropout" to prevent overfitting                   /
# ////////////////////////////////////////////////////////////

import tensorflow as tf

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("./mnist/data/", one_hot = True)

tf.reset_default_graph()

X = tf.placeholder(tf.float32, [None, 28, 28, 1])
Y = tf.placeholder(tf.float32, [None, 10])
keep_prob = tf.placeholder(tf.float32)

global_step  = tf.Variable(0, trainable = False, name = 'global_step')

W1 = tf.Variable(tf.random_normal([3, 3, 1, 32], stddev = 0.01))
L1 = tf.nn.conv2d(X, W1, strides = [1, 1, 1, 1], padding = 'SAME')
L1 = tf.nn.relu(L1)
L1 = tf.nn.max_pool(L1, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = 'SAME')

W2 = tf.Variable(tf.random_normal([3, 3, 32, 64], stddev = 0.01))
L2 = tf.nn.conv2d(L1, W2, strides = [1, 1, 1, 1], padding = 'SAME')
L2 = tf.nn.relu(L2)
L2 = tf.nn.max_pool(L2, ksize = [1, 2, 2, 1], strides = [1, 2, 2, 1], padding = 'SAME')

W3 = tf.Variable(tf. random_normal([7*7*64, 256], stddev = 0.01))
L3 = tf.reshape(L2, [-1, 7*7*64])
L3 = tf.matmul(L3, W3)
L3 = tf.nn.relu(L3)
L3 = tf.nn.dropout(L3, keep_prob)

W4 = tf.Variable(tf.random_normal([256, 10], stddev = 0.01))
model = tf.matmul(L3, W4)

cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = model, labels = Y))
optimizer = tf.train.AdamOptimizer(0.001).minimize(cost, global_step = global_step)

mnist.test.images.reshape(-1, 28, 28, 1)

init = tf.global_variables_initializer()
sess = tf.Session()
saver = tf.train.Saver(tf.global_variables())

ckpt = tf.train.get_checkpoint_state('./CNN_model')
if ckpt and tf.train.checkpoint_exists(ckpt.model_checkpoint_path):
    saver.restore(sess, ckpt.model_checkpoint_path)
else:
    sess.run(init)

batch_size = 100
total_batch = int(mnist.train.num_examples / batch_size)

total_cost = 0
    
for i in range(total_batch):
    if sess.run(global_step) > 7500:
        break
    
    batch_xs, batch_ys = mnist.train.next_batch(batch_size)
    batch_xs = batch_xs.reshape(-1, 28, 28, 1)
       
    _, cost_val = sess.run([optimizer, cost], feed_dict = {X: batch_xs, Y: batch_ys, keep_prob: 0.8})
        
    total_cost += cost_val
        
    if (i + 1) % 100 == 0:
        print('Learn: %d' % (i + 1), 'Global step: %d' % sess.run(global_step),'Avg. cost:%.4f' % (total_cost / (i + 1)))
     
    
    
saver.save(sess, './CNN_model/CNN.ckpt', global_step = global_step)

is_correct = tf.equal(tf.argmax(model, 1), tf.argmax(Y, 1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))
print('정확도:', sess.run(accuracy, feed_dict = {X: mnist.test.images.reshape(-1, 28, 28, 1), Y: mnist.test.labels, keep_prob: 1}))
